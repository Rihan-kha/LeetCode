int numUniqueEmails(char** emails, int emailsSize) {
    char valid_email[100][100];
    int count = 0;

    for (int i = 0; i < emailsSize; i++) {
        char val_email[100] = {0};
        int j = 0;
        int skip = 0;

        char* email = emails[i];
        while (email[j] != '\0') {
            if (email[j] == '+') {
                skip = 1;
            } else if (email[j] == '@') {
                strcat(val_email, email + j);
                break;
            } else if (email[j] != '.' && !skip) {
                strncat(val_email, &email[j], 1);
            }
            j++;
        }

        int found = 0;
        for (int k = 0; k < count; k++) {
            if (strcmp(valid_email[k], val_email) == 0) {
                found = 1;
                break;
            }
        }

        if (!found) {
            strcpy(valid_email[count], val_email);
            count++;
        }
    }

    return count;
}




//////////////////////////////////////////////////////////////////////////////



char*normalizeEmail(const char*email){
    char* result=(char*)malloc(105*sizeof(char));
    int i=0,j=0;
    while(email[i]!='@'){
        if(email[i]=='+'){
             while(email[i]!='@') i++;
             break;
        }
        if(email[i]!='.'){
            result[j++]=email[i];
        }
        i++;
    }
    while(email[i]!= '\0'){
        result[j++] = email[i++];
    }
    result[j]='\0';
    return result;
}int numUniqueEmails(char** emails, int emailsSize) {
char* unique[emailsSize];
int uniqueCount=0;
for(int i=0 ; i< emailsSize ; i++){
    char* norm = normalizeEmail(emails[i]);
    int exists=0;
    for(int k=0 ; k<uniqueCount ; k++){
        if(strcmp(unique[k], norm)==0){
exists=1;
break;
        }
    }
    if(!exists){
        unique[uniqueCount++]=norm;
    }
    else{
        free(norm);
    }
}
for(int i=0 ; i<uniqueCount ; i++){
    free(unique[i]);
}
return uniqueCount;

}

